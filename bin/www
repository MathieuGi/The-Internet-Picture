#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('theinternetpicture:server');
var fs = require('fs');
var https = require('https');
var privateKey = fs.readFileSync('sslcert/www.quiestleplusriche.fr_private_key.key', 'utf8');
var certificate = fs.readFileSync('sslcert/www.quiestleplusriche.fr_ssl_certificate.cer', 'utf8');

// Create the credentials for the HTTPS server
var credentials = { 
    key: privateKey, 
    cert: certificate,
    requestCert: true,
    rejectUnauthorized: false 
    };

// Specify the two differents ports

var port_HTTPS = normalizePort(process.env.PORT_HTTPS || '3000');

// Create the HTTPS server (listening on the port_HTTPS)
var server_HTTPS = https.createServer(credentials, app);
server_HTTPS.listen(port_HTTPS);

// Attach socket.io
var io = app.io
io.attach(server_HTTPS);


// Normalize a port into a number, string, or false.
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}


// Event listener for HTTPS server "error" event.
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// Event listener for HTTPS server "listening" event.
function onListening() {
    var addr = server_HTTPS.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}